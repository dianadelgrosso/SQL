--For this project, I downloaded Spotify data from Kaggle. 
  https://www.kaggle.com/datasets/equinxx/spotify-top-50-songs-in-2021?select=spotify_top50_2021.csv
--Then I created a table to insert Spotify data into.
--Finally, I performed analytics on the data using SQL. 


CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness decimal(8,7) NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );


--In this query, "top" will be gagued on popularity

ANALYSIS:

--Who are the top 5 artists based on popularity?

SELECT artist_name, popularity
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity desc LIMIT 10;


--What artists have songs in the top songs, and how many songs do they have in top songs?

SELECT artist_name, COUNT(track_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(track_name) desc;


--What are the 5 artists with the most top songs?

SELECT artist_name, COUNT(track_name)
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY COUNT(track_name) desc
LIMIT 5;


--What is the average tempo of the top songs?

SELECT avg(tempo)
FROM BIT_DB.Spotifydata;


--What are the top 10 songs?

SELECT track_name, popularity
FROM BIT_DB.Spotifydata
ORDER BY popularity DESC;


--Look at the top 10 songs and see if their tempo falls above, below, or at the average tempo of all songs.

SELECT tempo, track_name, 
    (CASE
        WHEN tempo > 121.08368 THEN "above average"
        WHEN tempo = 121.08368 THEN "average"
        WHEN tempo < 121.08368 THEN "below average"
    END) as "tempo_zone"
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity DESC LIMIT 10;


--How far away is each song's tempo from the average?

SELECT track_name, tempo,
   (CASE 
       WHEN tempo BETWEEN 111.08368 AND 131.08368 THEN "within 10"
       WHEN tempo BETWEEN 101.08368 AND 141.08368 THEN "within 20"
       WHEN tempo BETWEEN 91.08368 AND 151.08368 THEN "within 30"
       WHEN tempo BETWEEN 81.08368 AND 161.08368 THEN "within 40"
       ELSE "greater than 40"
   END) AS "Tempo_Range_From_Avg" 
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity DESC;


--How many songs fall in each tempo range?

SELECT 
    SUM(CASE
        WHEN tempo BETWEEN 111.08368 AND 131.08368 THEN "1"
        ELSE "0"
    END) as "within 10",
    SUM(CASE
      WHEN tempo BETWEEN 101.08368 AND 141.08368 THEN "1"
      ELSE "0"
    END) as "within 20",
    SUM(CASE
        WHEN tempo BETWEEN 91.08368 AND 151.08368 THEN "1"
        ELSE "0"
        END) as "within 30",
    SUM(CASE
        WHEN tempo BETWEEN 81.08368 AND 161.08368 THEN "1"
        ELSE "0"
        END) as "within 40",
    SUM(CASE
        WHEN tempo > 161.08368 OR tempo < 81.08368 THEN "1"
        ELSE "0"
        END) as "greater than 40"
FROM BIT_DB.Spotifydata;


--What was the average key of the top songs, and what is each song's key?

SELECT track_name, song_key,
    (SELECT AVG(song_key) 
    FROM BIT_DB.Spotifydata) Avg_Song_Key
FROM BIT_DB.Spotifydata;


--How many songs are above average, below average, or the same as the average song key?

SELECT
    SUM(CASE
        WHEN song_key > 
            (SELECT AVG(song_key) 
            FROM BIT_DB.Spotifydata)
        THEN "1"
        ELSE "0"
    END) as "Above Average",
    SUM(CASE
        WHEN song_key = 
            (SELECT AVG(song_key) 
            FROM BIT_DB.Spotifydata)
        THEN "1"
        ELSE "0"
    END) as "Average",
    SUM(CASE
        WHEN song_key < 
        (SELECT AVG(song_key) 
            FROM BIT_DB.Spotifydata)
        THEN "1"
        ELSE "0"
    END) as "Below Average"
FROM BIT_DB.Spotifydata;


--What songs are above the average key, and what is their key?

SELECT track_name, song_key
FROM BIT_DB.Spotifydata
WHERE song_key > 
    (SELECT AVG(song_key) 
    FROM BIT_DB.Spotifydata)
ORDER BY song_key desc
